"""Verifiable Credential marshmallow schema classes."""

from marshmallow import INCLUDE, fields, post_load, post_dump

from ....messaging.models.base import Schema
from ....messaging.valid import (
    CREDENTIAL_CONTEXT,
    CREDENTIAL_TYPE,
    CREDENTIAL_SUBJECT,
    DIDKey,
    DictOrDictListField,
    INDY_ISO8601_DATETIME,
    RFC3339_DATETIME,
    StrOrDictField,
    Uri,
    UUIDFour,
    UriOrDictField,
)


class LinkedDataProofSchema(Schema):
    """Linked data proof schema.

    Based on https://w3c-ccg.github.io/ld-proofs

    """

    class Meta:
        """Accept parameter overload."""

        unknown = INCLUDE

    type = fields.Str(
        required=True,
        description=(
            "Identifies the digital signature suite"
            " that was used to create the signature"
        ),
        example="Ed25519Signature2018",
    )

    proof_purpose = fields.Str(
        data_key="proofPurpose",
        required=True,
        description="Proof purpose",
        example="assertionMethod",
    )

    verification_method = fields.Str(
        data_key="verificationMethod",
        required=True,
        description="Information used for proof verification",
        example=(
            "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
            "#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
        ),
        validate=Uri(),
    )

    created = fields.Str(
        required=True,
        description=(
            "The string value of an ISO8601 combined date"
            " and time string generated by the Signature Algorithm"
        ),
        **INDY_ISO8601_DATETIME,
    )

    domain = fields.Str(
        required=False,
        description="A string value specifying the restricted domain of the signature.",
        example="example.com",
        validate=Uri(),
    )

    challenge = fields.Str(
        required=False,
        description=(
            "Associates a challenge with a proof, for use"
            " with a proofPurpose such as authentication"
        ),
        example=UUIDFour.EXAMPLE,
    )

    jws = fields.Str(
        required=False,
        description="Associates a Detached Json Web Signature with a proof",
        example=(
            "eyJhbGciOiAiRWREUc2UsICJjcml0IjogWyJiNjQiXX0..lKJU0Df_ke"
            "blRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQ1Ch6YBKY7UBAjg6iBX5qBQ"
        ),
    )

    proofValue = fields.Str(
        required=False,
        description="The proof value of a proof",
        example=(
            "sy1AahqbzJQ63n9RtekmwzqZeVj494VppdAVJBnMYrTwft6cLJJGeTSSxCCJ6HKnRtwE7"
            "jjDh6sB2z2AAiZY9BBnCD8wUVgwqH3qchGRCuC2RugA4eQ9fUrR4Yuycac3caiaaay"
        ),
    )

    @post_load
    def make_proof(self, data, **kwargs):
        """Create proof model from dict using schema."""
        from .credential import LDProof

        return LDProof(**data)

    @post_dump
    def remove_none_values(self, data, **kwargs):
        """Remove None values from dict before outputting."""
        return {key: value for key, value in data.items() if value}


class CredentialSchema(Schema):
    """Linked data credential schema.

    Does not include proof. Based on https://www.w3.org/TR/vc-data-model

    """

    class Meta:
        """Accept parameter overload."""

        unknown = INCLUDE

    context = fields.List(
        UriOrDictField(
            required=True,
        ),
        data_key="@context",
        required=True,
        description="The JSON-LD context of the credential",
        **CREDENTIAL_CONTEXT,
    )

    id = fields.Str(
        required=False,
        desscription="The ID of the credential",
        example="http://example.edu/credentials/1872",
        validate=Uri(),
    )

    type = fields.List(
        fields.Str(required=True),
        required=True,
        description="The JSON-LD type of the credential",
        **CREDENTIAL_TYPE,
    )

    issuer = StrOrDictField(
        required=True,
        description=(
            "The JSON-LD Verifiable Credential Issuer."
            " Either string of object with id field."
        ),
        example=DIDKey.EXAMPLE,
    )

    issuance_date = fields.Str(
        data_key="issuanceDate",
        required=True,
        description="The issuance date",
        **RFC3339_DATETIME,
    )

    expiration_date = fields.Str(
        data_key="expirationDate",
        required=False,
        description="The expiration date",
        **RFC3339_DATETIME,
    )

    credential_subject = DictOrDictListField(
        required=True,
        data_key="credentialSubject",
        **CREDENTIAL_SUBJECT,
    )

    # TODO: this is probably not necessary if we use the `BaseModel`
    @post_load
    def make_credential(self, data, **kwargs):
        """Remove None values from dict before outputting."""
        from .credential import VerifiableCredential

        return VerifiableCredential(**data)

    @post_dump
    def remove_none_values(self, data, **kwargs):
        """Remove None values from dict before outputting."""
        return {key: value for key, value in data.items() if value}


class VerifiableCredentialSchema(CredentialSchema):
    """Linked data verifiable credential schema.

    Based on https://www.w3.org/TR/vc-data-model

    """

    proof = fields.Nested(
        LinkedDataProofSchema(),
        required=True,
        description="The proof of the credential",
        example={
            "type": "Ed25519Signature2018",
            "verificationMethod": (
                "did:key:z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyG"
                "o38EefXmgDL#z6Mkgg342Ycpuk263R9d8Aq6MUaxPn1DDeHyGo38EefXmgDL"
            ),
            "created": "2019-12-11T03:50:55",
            "proofPurpose": "assertionMethod",
            "jws": (
                "eyJhbGciOiAiRWREU0EiLCAiYjY0IjogZmFsc2UsICJjcml0JiNjQiXX0..lKJU0Df"
                "_keblRKhZAS9Qq6zybm-HqUXNVZ8vgEPNTAjQKBhQDxvXNo7nvtUBb_Eq1Ch6YBKY5qBQ"
            ),
        },
    )
